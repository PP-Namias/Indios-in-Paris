<UserControl     x:Class="StudentAttendanceManagementSystem.UserManagement"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:local="clr-namespace:StudentAttendanceManagementSystem"
                 xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"         
                 xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                 xmlns:src="http://metro.mahapps.com/winfx/xaml/controls"
                 
                 Background="{DynamicResource MaterialDesignPaper}"
                 FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
                 TextElement.Foreground="{DynamicResource MaterialDesignBody}"
                 TextElement.FontWeight="Regular"
                 TextElement.FontSize="12"
                 TextOptions.TextFormattingMode="Ideal" 
                 TextOptions.TextRenderingMode="Auto" 
                 
                 Height="Auto"
                 Width="Auto"     
                 MinHeight="785" 
                 MinWidth="1125"
                 Loaded="Window_Loaded">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- note you only need bring in these extra resource dictionaries when using non-default styles, so only bring them into your controls where the default style is not what you want -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Slider.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBlock.xaml" />
                <!-- throw in some extra colour for our floating action button -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/MaterialDesignColor.Green.Named.Primary.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialDesignPasswordBox}">
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <Style TargetType="{x:Type Viewbox}">
                <Setter Property="Width" Value="18" />
                <Setter Property="Height" Value="18" />
                <Setter Property="Margin" Value="0 0 8 0" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource MaterialDesignSlider}">
                <Setter Property="Margin" Value="0 8 0 8" />
            </Style>
            <!-- 
            <Style TargetType="{x:Type materialDesign:PackIcon}" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Margin" Value="4 0 4 0" />
            </Style>
            -->

        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="100" />
        </Grid.RowDefinitions>

        <ScrollViewer Grid.Row="0" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,20,0,0" Height="736" Grid.RowSpan="2" Width="1068">
            <Grid Margin="0,0,0,20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="120" />
                    <ColumnDefinition Width="160" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,10,0,10" FontWeight="DemiBold" >User Management</TextBlock>

                <DataGrid Grid.RowSpan="13" Grid.Column="3"   
                  ScrollViewer.CanContentScroll="True" 
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  ScrollViewer.HorizontalScrollBarVisibility="Auto"
                  AutoGenerateColumns="False" Height="Auto" 
                  HorizontalAlignment="Left" Name="DataGrid" 
                  Width="500"
                  AlternatingRowBackground="LightGray"
                  CanUserAddRows="False"
                  IsReadOnly="True" Margin="10,34,0,0">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding ID}" Header="ID" Width="Auto"  />
                        <DataGridTextColumn Binding="{Binding Username}" Header="Username" Width="Auto"  />
                        <DataGridTextColumn Binding="{Binding Passwordhash}" Header="Passwordhash" Width="Auto" />
                        <DataGridTextColumn Binding="{Binding Phonenumber}" Header="Phonenumber" Width="Auto" />
                        <DataGridTextColumn Binding="{Binding Role}" Header="Role" Width="Auto" />
                    </DataGrid.Columns>
                </DataGrid>

                <TextBlock Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" Margin="16,0,8,0" Height="15">ID:</TextBlock>

                <TextBlock Grid.Row="2" Grid.Column="0" VerticalAlignment="Center" Margin="16,0,8,0" Height="15">Username:</TextBlock>


                <TextBlock Grid.Row="3" Grid.Column="0"  VerticalAlignment="Center" Margin="16,0,8,0" Height="15">Password [Hash]:</TextBlock>

                <TextBlock Grid.Row="5" Grid.Column="0"  VerticalAlignment="Center" Margin="16,0,8,0" Height="15">Phone #:</TextBlock>
                <ComboBox  Grid.Row="6" Grid.Column="1" Name="ProductComboBox" materialDesign:HintAssist.Hint="Role" MinWidth="72" Height="25" Grid.ColumnSpan="3" Margin="5,0,395,0">
                    <ComboBox.SelectedValue>
                        <Binding Path="ProdID" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <!-- 
                                <domain:NotEmptyValidationRule ValidatesOnTargetUpdated="True"/>
                                -->
                            </Binding.ValidationRules>
                        </Binding>
                    </ComboBox.SelectedValue>
                </ComboBox>

                <TextBlock Grid.Row="6" Grid.Column="0" VerticalAlignment="Center" Margin="16,0,8,0" Height="15">Role</TextBlock>
                <Button Grid.Row="7"  Style="{StaticResource MaterialDesignRaisedDarkButton}" ToolTip="Add user" FontSize="11" Content="Add User" Grid.Column="1" Height="Auto"  Margin="65,15,5,10" Click="Button_Click_2" />
                <TextBox x:Name="QuantityTextBox_Copy" materialDesign:HintAssist.Hint="ID" Margin="5,34,0,5" Grid.RowSpan="2" HorizontalAlignment="Left" Width="119" Grid.Column="1">
                    <Binding Path="Quantity" ValidatesOnDataErrors="True" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <!-- 
                                <domain:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                -->
                            <!-- Checks for exceptions during the setting of the source property.Alternatively, set ValidatesOnExceptions to True on the Binding.-->
                            <ExceptionValidationRule/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox>
                <TextBox x:Name="QuantityTextBox_Copy1" materialDesign:HintAssist.Hint="Username" Margin="5,16,0,0" Grid.ColumnSpan="3" HorizontalAlignment="Left" Width="160" Grid.Column="1" Grid.Row="2">
                    <Binding Path="Quantity" ValidatesOnDataErrors="True" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <!-- 
                                <domain:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                -->
                            <!-- Checks for exceptions during the setting of the source property.Alternatively, set ValidatesOnExceptions to True on the Binding.-->
                            <ExceptionValidationRule/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox>
                <TextBox x:Name="QuantityTextBox_Copy2" materialDesign:HintAssist.Hint="Phone Number" Margin="10,6,0,0" Grid.ColumnSpan="3" HorizontalAlignment="Left" Width="160" Grid.Column="1" Grid.Row="5">
                    <Binding Path="Quantity" ValidatesOnDataErrors="True" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <!-- 
                                <domain:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                -->
                            <!-- Checks for exceptions during the setting of the source property.Alternatively, set ValidatesOnExceptions to True on the Binding.-->
                            <ExceptionValidationRule/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox>
                <TextBox x:Name="QuantityTextBox_Copy3" materialDesign:HintAssist.Hint="Password" Margin="10,5,0,5" HorizontalAlignment="Left" Width="160" Grid.Column="1" Grid.Row="3" Grid.ColumnSpan="3">
                    <Binding Path="Quantity" ValidatesOnDataErrors="True" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <!-- 
                                <domain:NotEmptyValidationRule ValidatesOnTargetUpdated="True" />
                                -->
                            <!-- Checks for exceptions during the setting of the source property.Alternatively, set ValidatesOnExceptions to True on the Binding.-->
                            <ExceptionValidationRule/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox>

            </Grid>
        </ScrollViewer>
        <!-- start + popupbox -->
        <TextBlock Grid.Row="1"  VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="Auto" RenderTransformOrigin="0.5,0.5" Height="36" Margin="0,0,0,50" >                    
                            <Button Style="{StaticResource MaterialDesignRaisedDarkButton}" Margin="10 0 40 0" Width="100" ToolTip="Create customer order." Content="Add" Click="Button_Click"/>   
                            <Button Style="{StaticResource MaterialDesignRaisedDarkButton}" Margin="0 0 40 0" Width="100"  ToolTip="Clear all inserted values, this also removes items added to the order." Content="Clear" Click="Button_Click_1"/>
        </TextBlock>
        <!-- End + popupbox -->
    </Grid>
</UserControl>